{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | number | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  RINKEBY = 4,\r\n  BSC = 56,\r\n  FANTOM = 250,\r\n  AVALANCHE = 43114\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\n\r\nexport const FACTORY_ADDRESS_MAP = {\r\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\r\n  [ChainId.RINKEBY]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.BSC]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\r\n  [ChainId.FANTOM]: '0x152eE697f2E276fA89E96742e9bB9aB1F2E61bE3',\r\n  [ChainId.AVALANCHE]: '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10'\r\n}\r\n\r\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\r\n\r\nexport const INIT_CODE_HASH_MAP = {\r\n  [ChainId.MAINNET]: INIT_CODE_HASH,\r\n  [ChainId.RINKEBY]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\r\n  [ChainId.BSC]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\r\n  [ChainId.FANTOM]: '0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2',\r\n  [ChainId.AVALANCHE]: '0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91'\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = {\r\n  [ChainId.MAINNET]: JSBI.BigInt(9970),\r\n  [ChainId.RINKEBY]: JSBI.BigInt(9970),\r\n  [ChainId.BSC]: JSBI.BigInt(9975),\r\n  [ChainId.FANTOM]: JSBI.BigInt(9980),\r\n  [ChainId.AVALANCHE]: JSBI.BigInt(9970)\r\n}\r\nexport const FEE_PROTOCOL_OUT = JSBI.BigInt(9990)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ChainId, SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER = {\r\n    [ChainId.MAINNET]: new Currency(18, 'ETH', 'ETH'),\r\n    [ChainId.RINKEBY]: new Currency(18, 'ETH', 'ETH'),\r\n    [ChainId.BSC]: new Currency(18, 'BNB', 'BNB'),\r\n    [ChainId.FANTOM]: new Currency(18, 'FTM', 'FTM'),\r\n    [ChainId.AVALANCHE]: new Currency(18, 'AVAX', 'AVAX')\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nexport { ETHER }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n  public readonly projectLink?: string\r\n\r\n  public constructor(\r\n    chainId: ChainId,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    projectLink?: string\r\n  ) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n    this.projectLink = projectLink\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n    'https://ethereum.org'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n    'https://ethereum.org'\r\n  ),\r\n  [ChainId.BSC]: new Token(\r\n    ChainId.BSC,\r\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://binance.org'\r\n  ),\r\n  [ChainId.FANTOM]: new Token(\r\n    ChainId.FANTOM,\r\n    '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',\r\n    18,\r\n    'WFTM',\r\n    'Wrapped Fantom',\r\n    'https://fantom.org'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(\r\n    ChainId.AVALANCHE,\r\n    '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX',\r\n    'https://www.avax.network'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId, TradeType, FEES_DENOMINATOR, FEE_PROTOCOL_OUT } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER[chainId], amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public addFee(tradeType: TradeType): CurrencyAmount {\r\n    if (tradeType === TradeType.EXACT_OUTPUT) {\r\n      return new CurrencyAmount(this.currency, JSBI.divide(JSBI.multiply(this.raw, FEES_DENOMINATOR), FEE_PROTOCOL_OUT))\r\n    }\r\n    return this\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS_MAP,\r\n  INIT_CODE_HASH_MAP,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  FEES_NUMERATOR,\r\n  FEES_DENOMINATOR,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n    return getCreate2Address(\r\n      FACTORY_ADDRESS_MAP[token0.chainId],\r\n      keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n      INIT_CODE_HASH_MAP[token0.chainId]\r\n    )\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'WAF-LP',\r\n      'Waifuswap LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR[chainId])\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR[chainId])\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n      (input === ETHER[pairs[0].chainId] && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n      (output === ETHER[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER[chainId]) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER[chainId]) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], route.chainId)\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], route.chainId)\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER[route.chainId]\r\n          ? CurrencyAmount.ether(amounts[0].raw, route.chainId)\r\n          : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER[route.chainId]\r\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, route.chainId)\r\n          : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n          ? currencyOut.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\r\n      } catch (error) {\r\n        // input too low\r\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n          ? currencyIn.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pancake Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() { }\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER[trade.route.chainId]\r\n    const etherOut = trade.outputAmount.currency === ETHER[trade.route.chainId]\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage).addFee(trade.tradeType))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage).addFee(trade.tradeType))\r\n    const path: string[] = trade.route.path.map((token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPancakePair from './abis/IPancakePair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS_MAP","MAINNET","RINKEBY","BSC","FANTOM","AVALANCHE","INIT_CODE_HASH","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEE_PROTOCOL_OUT","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","addFee","tradeType","EXACT_OUTPUT","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}