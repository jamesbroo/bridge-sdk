{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | number | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  RINKEBY = 4,\r\n  BSC = 56,\r\n  FANTOM = 250,\r\n  AVALANCHE = 43114\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\n\r\nexport const FACTORY_ADDRESS_MAP = {\r\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\r\n  [ChainId.RINKEBY]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.BSC]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\r\n  [ChainId.FANTOM]: '0x152eE697f2E276fA89E96742e9bB9aB1F2E61bE3',\r\n  [ChainId.AVALANCHE]: '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10'\r\n}\r\n\r\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\r\n\r\nexport const INIT_CODE_HASH_MAP = {\r\n  [ChainId.MAINNET]: INIT_CODE_HASH,\r\n  [ChainId.RINKEBY]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\r\n  [ChainId.BSC]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\r\n  [ChainId.FANTOM]: '0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2',\r\n  [ChainId.AVALANCHE]: '0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91'\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = {\r\n  [ChainId.MAINNET]: JSBI.BigInt(9970),\r\n  [ChainId.RINKEBY]: JSBI.BigInt(9970),\r\n  [ChainId.BSC]: JSBI.BigInt(9975),\r\n  [ChainId.FANTOM]: JSBI.BigInt(9980),\r\n  [ChainId.AVALANCHE]: JSBI.BigInt(9970)\r\n}\r\nexport const FEE_PROTOCOL_OUT = JSBI.BigInt(9990)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ChainId, SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER = {\r\n    [ChainId.MAINNET]: new Currency(18, 'ETH', 'ETH'),\r\n    [ChainId.RINKEBY]: new Currency(18, 'ETH', 'ETH'),\r\n    [ChainId.BSC]: new Currency(18, 'BNB', 'BNB'),\r\n    [ChainId.FANTOM]: new Currency(18, 'FTM', 'FTM'),\r\n    [ChainId.AVALANCHE]: new Currency(18, 'AVAX', 'AVAX')\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nexport { ETHER }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n  public readonly projectLink?: string\r\n\r\n  public constructor(\r\n    chainId: ChainId,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    projectLink?: string\r\n  ) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n    this.projectLink = projectLink\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n    'https://ethereum.org'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n    'https://ethereum.org'\r\n  ),\r\n  [ChainId.BSC]: new Token(\r\n    ChainId.BSC,\r\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://binance.org'\r\n  ),\r\n  [ChainId.FANTOM]: new Token(\r\n    ChainId.FANTOM,\r\n    '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',\r\n    18,\r\n    'WFTM',\r\n    'Wrapped Fantom',\r\n    'https://fantom.org'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(\r\n    ChainId.AVALANCHE,\r\n    '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX',\r\n    'https://www.avax.network'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId, TradeType, FEES_DENOMINATOR, FEE_PROTOCOL_OUT } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER[chainId], amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public addFee(tradeType: TradeType): CurrencyAmount {\r\n    if (tradeType === TradeType.EXACT_OUTPUT) {\r\n      return new CurrencyAmount(this.currency, JSBI.divide(JSBI.multiply(this.raw, FEES_DENOMINATOR), FEE_PROTOCOL_OUT))\r\n    }\r\n    return this\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS_MAP,\r\n  INIT_CODE_HASH_MAP,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  FEES_NUMERATOR,\r\n  FEES_DENOMINATOR,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n    return getCreate2Address(\r\n      FACTORY_ADDRESS_MAP[token0.chainId],\r\n      keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n      INIT_CODE_HASH_MAP[token0.chainId]\r\n    )\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'WAF-LP',\r\n      'Waifuswap LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR[chainId])\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR[chainId])\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n      (input === ETHER[pairs[0].chainId] && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n      (output === ETHER[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER[chainId]) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER[chainId]) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], route.chainId)\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], route.chainId)\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER[route.chainId]\r\n          ? CurrencyAmount.ether(amounts[0].raw, route.chainId)\r\n          : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER[route.chainId]\r\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, route.chainId)\r\n          : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n          ? currencyOut.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\r\n      } catch (error) {\r\n        // input too low\r\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n          ? currencyIn.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pancake Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() { }\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER[trade.route.chainId]\r\n    const etherOut = trade.outputAmount.currency === ETHER[trade.route.chainId]\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage).addFee(trade.tradeType))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage).addFee(trade.tradeType))\r\n    const path: string[] = trade.route.path.map((token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPancakePair from './abis/IPancakePair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","MAINNET","RINKEBY","BSC","FANTOM","AVALANCHE","INIT_CODE_HASH","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEE_PROTOCOL_OUT","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","addFee","tradeType","EXACT_OUTPUT","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","token1","getCreate2Address","keccak256","pack","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","amounts","Array","nextPairs","EXACT_INPUT","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPancakePair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}